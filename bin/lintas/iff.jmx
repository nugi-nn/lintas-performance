<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IFF" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config" enabled="true">
          <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://selenium:4444/wd/hub</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.file.detector">USELESS</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="load data cargo manifest when add worker order" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
//var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
//var wait = new support_ui.WebDriverWait(WDS.browser, 8000);
//var conditions = org.openqa.selenium.support.ui.ExpectedConditions;
//var timeUnit = JavaImporter(java.util.concurrent.TimeUnit);
//
//WDS.sampleResult.sampleStart()
//WDS.log.info(&quot;Sample started&quot;);
//WDS.browser.manage().deleteAllCookies()
//WDS.log.info(&quot;Delete Cache&quot;);
//WDS.browser.get(&apos;http://10.64.2.169:3011/&apos;)
//WDS.log.info(&quot;go to LINTAS env. pre prod.&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;email&apos;)));
//var email = WDS.browser.findElement(pkg.By.id(&apos;email&apos;));
//email.sendKeys([&apos;su@xapiens.id&apos;]);
//email.sendKeys(pkg.Keys.TAB);
//WDS.log.info(&quot;type name&quot;);
//var password = WDS.browser.findElement(pkg.By.id(&apos;password&apos;));
//password.sendKeys([&apos;admin321&apos;]);
//password.sendKeys(pkg.Keys.TAB);
//WDS.log.info(&quot;type password&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;)));
////java.lang.Thread.sleep(2000)
//var btn_login = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;));
//btn_login.click();
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
//var cm = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;));
//cm.click();
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside&quot;)));
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]&quot;)));
//WDS.log.info(&quot;click button login&quot;);
////cargo manifest
//var cm_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[4]&quot;));
//cm_menu.click();
//WDS.log.info(&quot;click menu cargo manifest&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
//WDS.log.info(&quot;success load cargo manifest data&quot;);
//var vassel = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[2]/td[2]/a&quot;));
//vassel.click();
//WDS.log.info(&quot;click vassel name sample&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;wo&apos;]/div/div/div/div/div[1]/div/a&quot;)));
//var wo = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;wo&apos;]/div/div/div/div/div[1]/div/a&quot;));
//wo.click();
//WDS.log.info(&quot;click add work order&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]&quot;)))
//WDS.log.info(&quot;success load add work order data&quot;);
//WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="load data cargo manifest when add package" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
//var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
//var wait = new support_ui.WebDriverWait(WDS.browser, 8000);
//var conditions = org.openqa.selenium.support.ui.ExpectedConditions;
//var timeUnit = JavaImporter(java.util.concurrent.TimeUnit);
//
//WDS.sampleResult.sampleStart()
//WDS.log.info(&quot;Sample started&quot;);
//WDS.browser.manage().deleteAllCookies()
//WDS.log.info(&quot;Delete Cache&quot;);
//WDS.browser.get(&apos;http://10.64.2.169:3011/&apos;)
//WDS.log.info(&quot;go to LINTAS env. pre prod.&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;email&apos;)));
//var email = WDS.browser.findElement(pkg.By.id(&apos;email&apos;));
//email.sendKeys([&apos;su@xapiens.id&apos;]);
//email.sendKeys(pkg.Keys.TAB);
//WDS.log.info(&quot;type name&quot;);
//var password = WDS.browser.findElement(pkg.By.id(&apos;password&apos;));
//password.sendKeys([&apos;admin321&apos;]);
//password.sendKeys(pkg.Keys.TAB);
//WDS.log.info(&quot;type password&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;)));
////java.lang.Thread.sleep(2000)
//var btn_login = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;));
//btn_login.click();
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
//var cm = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;));
//cm.click();
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside&quot;)));
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]&quot;)));
//WDS.log.info(&quot;click button login&quot;);
////cargo manifest
//var cm_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[4]&quot;));
//cm_menu.click();
//WDS.log.info(&quot;click menu cargo manifest&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
//WDS.log.info(&quot;success load cargo manifest data&quot;);
//var vassel = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[2]/td[2]/a&quot;));
//vassel.click();
//WDS.log.info(&quot;click vassel name sample&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;cargo&apos;]/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]/a&quot;)));
//var wo = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;cargo&apos;]/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]/a&quot;));
//wo.click();
//WDS.log.info(&quot;click cargo no. sample&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/ul/li[2]/a&quot;)));
//var wo = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/ul/li[2]/a&quot;));
//wo.click();
//WDS.log.info(&quot;click add package&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]&quot;)))
//WDS.log.info(&quot;success load add package data&quot;);
//WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="load data of each module" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
//var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
//var wait = new support_ui.WebDriverWait(WDS.browser, 8000);
//var conditions = org.openqa.selenium.support.ui.ExpectedConditions;
//var timeUnit = JavaImporter(java.util.concurrent.TimeUnit);
//
//WDS.sampleResult.sampleStart()
//WDS.log.info(&quot;Sample started&quot;);
//WDS.browser.manage().deleteAllCookies()
//WDS.log.info(&quot;Delete Cache&quot;);
//WDS.browser.get(&apos;http://10.64.2.169:3011/&apos;)
//WDS.log.info(&quot;go to LINTAS env. pre prod.&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;email&apos;)));
//var email = WDS.browser.findElement(pkg.By.id(&apos;email&apos;));
//email.sendKeys([&apos;su@xapiens.id&apos;]);
//email.sendKeys(pkg.Keys.TAB);
//WDS.log.info(&quot;type name&quot;);
//var password = WDS.browser.findElement(pkg.By.id(&apos;password&apos;));
//password.sendKeys([&apos;admin321&apos;]);
//password.sendKeys(pkg.Keys.TAB);
//WDS.log.info(&quot;type password&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;)));
////java.lang.Thread.sleep(2000)
//var btn_login = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;));
//btn_login.click();
//WDS.log.info(&quot;click button login&quot;);
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside&quot;)));
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[1]&quot;)));
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
//WDS.log.info(&quot;check poin&quot;);
////var aside = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]&quot;));
////aside.click();
////WDS.log.info(&quot;click in&quot;);
//var order_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]/ul/li[2]&quot;));
//order_menu.click();
//WDS.log.info(&quot;click menu order&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
//WDS.log.info(&quot;success load order data&quot;);
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]&quot;)));
////WDS.log.info(&quot;check poin&quot;);
////var poin = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]&quot;));
////poin.click();
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside&quot;)));
////WDS.log.info(&quot;check poin&quot;);
////planning
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside/div[2]/ul/li[3]&quot;)));
////wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
//var planning_menu = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside/div[2]/ul/li[3]&quot;));
//planning_menu.click();
//WDS.log.info(&quot;click menu planning&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/a&quot;)))
//WDS.log.info(&quot;success load planning data&quot;);
////cargo manifest
//var cm_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[4]&quot;));
//cm_menu.click();
//WDS.log.info(&quot;click menu cargo manifest&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
//WDS.log.info(&quot;success load cargo manifest data&quot;);
////execution
//var execution_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[5]&quot;));
//execution_menu.click();
//WDS.log.info(&quot;click menu execution&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/a&quot;)))
//WDS.log.info(&quot;success load execution data&quot;);
////settlement
//var settlement_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[6]&quot;));
//settlement_menu.click();
//WDS.log.info(&quot;click menu settlement&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/a&quot;)))
//WDS.log.info(&quot;success load settlement data&quot;);
//WDS.sampleResult.sampleEnd()
//
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/noviantonugroho/Downloads/apache-jmeter-5.3/bin/lintas/summery.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/noviantonugroho/Downloads/apache-jmeter-5.3/bin/lintas/summery.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/noviantonugroho/Documents/xapiens/lintas/performance/bin/lintas/summery.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="suggestPackagesByCargoManifestId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;query&quot;: &quot;query{ suggestPackagesByCargoManifestId (cargoId: 10, cargoManifestId: 10 filter: { search: [{field: \&quot;cargoId\&quot; keyword: \&quot;NULL\&quot; keywordType: NULL }        ]      limit: 999    }  ) {  data {     id      packageNo    referenceNo    materialDescription    itemQty    uom    uomLength    uomVolume     uomWeight     length        width        height    volume      weight       dangerousGoods        remarks      manifestPackages        createdAt       createdBy {       name       company     }   }   total}}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">edge-jkt1.interport.co.id</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lintas-ff-api</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-token</stringProp>
                <stringProp name="Header.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJzdUB4YXBpZW5zLmlkIiwibmFtZSI6InN1IiwidXNlclR5cGVJZCI6MSwidXNlclR5cGVDb2RlIjoiSW50ZXJuYWwiLCJyb2xlSWQiOjMsImNvbXBhbnkiOiJJTlRFUlBPUlQiLCJpYXQiOjE1OTg4NTk4MDQsImV4cCI6MTU5ODk0NjIwNH0.JR-sIW8Pw5E82IHi_CI6IUPzaa2WKIMPWNbdX9-I9Jc</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic bGludGFzOkt5KVNFWkg3XVRGJXlyXCE=</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://edge-jkt1.interport.co.id/lintas-ff-api</stringProp>
                <stringProp name="Authorization.username">lintas</stringProp>
                <stringProp name="Authorization.password">ffl1nt@s_4dm1n</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AllOrders" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;query&quot;: &quot;query{ allOrders(planning: false, filter:{orderBy: \&quot;orderNo\&quot;}){   data {     id     orderNo     information{       id        order{          id       }       purchaseOrderNo       contractNo       contractTitle        contractualCustomer       referencesOrdersNo        referencesDocumentsNo        supportProjectName        isPLBGoods        cargoOwnerName       cargoOwnerEmail        cargoOwnerPhone        cargoOwnerCompany        contractualCustomer        shippingTerms        shippingType{          id        }        shippingTypeCode        serviceTypeCode        additionalService{          id        }        additionalServiceCode        serviceType{          id        }      }      documents{        id        order{          orderNo        }        documentUrl        documentTitle        isMobile        createdBy        {          id          name        }        createdAt        modifiedBy        {          id          name        }        updatedAt        deletedAt      }      packingList{        id       order{         id          orderNo        }        packingListNo        totalRow        destination{          id        }       workOrder{          id        }        origin{          id        }        destination{          id        }        workOrder{          id        }        package{          id        }        createdBy{          id        }        modifiedBy{          id       }     }      createdBy{        id      }      createdAt     updatedAt      deletedAt      orderType      rejectionRemark    }   total  }}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">edge-jkt1.interport.co.id</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lintas-ff-api</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-token</stringProp>
                <stringProp name="Header.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJzdUB4YXBpZW5zLmlkIiwibmFtZSI6InN1IiwidXNlclR5cGVJZCI6MSwidXNlclR5cGVDb2RlIjoiSW50ZXJuYWwiLCJyb2xlSWQiOjMsImNvbXBhbnkiOiJJTlRFUlBPUlQiLCJpYXQiOjE1OTg4NTk4MDQsImV4cCI6MTU5ODk0NjIwNH0.JR-sIW8Pw5E82IHi_CI6IUPzaa2WKIMPWNbdX9-I9Jc</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic bGludGFzOkt5KVNFWkg3XVRGJXlyXCE=</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://edge-jkt1.interport.co.id/lintas-ff-api</stringProp>
                <stringProp name="Authorization.username">lintas</stringProp>
                <stringProp name="Authorization.password">ffl1nt@s_4dm1n</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AllUom" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;query&quot;: &quot;query{ allUom(filter:{skip:0, search: [{field: \&quot;status\&quot;, keyword: \&quot;true\&quot;}]}) {   data{     id     initialValue     uomOrigin     convertedValue     uomConverted      uomType      status      modifiedByUser{        id      }      updatedAt      deletedAt    }  }}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">edge-jkt1.interport.co.id</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lintas-ff-api</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-token</stringProp>
                <stringProp name="Header.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJzdUB4YXBpZW5zLmlkIiwibmFtZSI6InN1IiwidXNlclR5cGVJZCI6MSwidXNlclR5cGVDb2RlIjoiSW50ZXJuYWwiLCJyb2xlSWQiOjMsImNvbXBhbnkiOiJJTlRFUlBPUlQiLCJpYXQiOjE1OTg4NTk4MDQsImV4cCI6MTU5ODk0NjIwNH0.JR-sIW8Pw5E82IHi_CI6IUPzaa2WKIMPWNbdX9-I9Jc</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic bGludGFzOkt5KVNFWkg3XVRGJXlyXCE=</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://edge-jkt1.interport.co.id/lintas-ff-api</stringProp>
                <stringProp name="Authorization.username">lintas</stringProp>
                <stringProp name="Authorization.password">ffl1nt@s_4dm1n</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AllExecutions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;query&quot;: &quot;query{  allExecution(filter:{skip:0, orderBy: \&quot;workOrderNo\&quot;  }){    data{      id      packingList{        id        order{          id        }        packingListNo        totalRow        origin{          id        }        destination{          id        }        workOrder{          id          packingList{            id          }          workOrderNo          workOrderSequence          assignment{            id          }          workflow{            id          }          workOrderStatus{            id          }          transportation          estTimeArrivial          estTimeDeparture          origin{            id          }          destination{            id          }          documents{            id          }          completionDate          lastStatus          createdBy{            id          }          modifiedBy{            id          }          createdAt          updatedAt          deletedAt        }        package{          id          packageNo          ajuNo          referenceNo          materialDescription          itemQty          cargoPackages{            id          }          uom          uomDetail{          id          }          uomLength          uomVolume          uomWeight          uomLengthDetail{            id          }          uomVolumeDetail{            id          }          uomWeightDetail{            id          }          dangerousGoods          remarks        }        createdBy{          id          name          email          title          company          address          companyName          companyEmail        }        modifiedBy{          id          name          email          title          company          address          companyName          companyEmail        }      }      workOrderNo      assignment{        id        businessPartner{          id        }        partner{          id        }        location{          id        }        isActive        modifiedByUser{          id        }        createdByUser{          id        }        updatedAt        deletedAt      }      transportation      origin{        id      }      destination{        id      }      estTimeDeparture      estTimeArrivial      workflowId{        id      }      documents{        id      }      workOrderStatus{        id      }      completionDate      lastStatus    }  }}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">edge-jkt1.interport.co.id</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lintas-ff-api</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-token</stringProp>
                <stringProp name="Header.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJzdUB4YXBpZW5zLmlkIiwibmFtZSI6InN1IiwidXNlclR5cGVJZCI6MSwidXNlclR5cGVDb2RlIjoiSW50ZXJuYWwiLCJyb2xlSWQiOjMsImNvbXBhbnkiOiJJTlRFUlBPUlQiLCJpYXQiOjE1OTg4NTk4MDQsImV4cCI6MTU5ODk0NjIwNH0.JR-sIW8Pw5E82IHi_CI6IUPzaa2WKIMPWNbdX9-I9Jc</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic bGludGFzOkt5KVNFWkg3XVRGJXlyXCE=</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://edge-jkt1.interport.co.id/lintas-ff-api</stringProp>
                <stringProp name="Authorization.username">lintas</stringProp>
                <stringProp name="Authorization.password">ffl1nt@s_4dm1n</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderTracking" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;query&quot;: &quot;query{  orderTracking(orderNo: \&quot;20070066\&quot;){    id    orderNo    status    information    {purchaseOrderNo          contractNo          contractTitle          contractualCustomer          referencesOrdersNo          referencesDocumentsNo          supportProjectName          isPLBGoods          cargoOwnerName          cargoOwnerCompany          cargoOwnerEmail          cargoOwnerPhone          shippingTerms          createdAt          createdBy {            name            company          }}  createdBy {        name        company      }  documents{id documentUrl        documentTitle       createdBy{          name          company        }        createdAt}    packingList{id packingListNo workOrder{workOrderNo          estTimeDeparture          estTimeArrivial         origin {            city          } destination{city} workflow {            workflowStep{              stepSequence            }step {              id              stepCode              stepName              customerViewName            }          } workOrderStatus {            workflowStep {              step {                id                stepName              }            }executionTime            location            exception {              exceptionDescription            }            remarks          }}}       modifiedBy{id}    createdAt    updatedAt    deletedAt    orderType    rejectionRemark  }}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">edge-jkt1.interport.co.id</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lintas-ff-api</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-token</stringProp>
                <stringProp name="Header.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJzdUB4YXBpZW5zLmlkIiwibmFtZSI6InN1IiwidXNlclR5cGVJZCI6MSwidXNlclR5cGVDb2RlIjoiSW50ZXJuYWwiLCJyb2xlSWQiOjMsImNvbXBhbnkiOiJJTlRFUlBPUlQiLCJpYXQiOjE1OTg4NTk4MDQsImV4cCI6MTU5ODk0NjIwNH0.JR-sIW8Pw5E82IHi_CI6IUPzaa2WKIMPWNbdX9-I9Jc</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic bGludGFzOkt5KVNFWkg3XVRGJXlyXCE=</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://edge-jkt1.interport.co.id/lintas-ff-api</stringProp>
                <stringProp name="Authorization.username">lintas</stringProp>
                <stringProp name="Authorization.password">ffl1nt@s_4dm1n</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWorkOrderByCargoManifestId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;query&quot;: &quot;query {getWorkOrderByCargoManifestId(cargoManifestId: 11) {      data {        id        workOrderNo        workOrderSequence        packingList {          order {            information {              cargoOwnerName              cargoOwnerCompany            }          }        }        assignment {          businessPartner {            id            vendorNo            partnerCode            partnerName            email            phone            address          }        }        workflow {          id          workflowCode          workflowName          isActive        }        transportation        estTimeArrivial        estTimeDeparture        completionDate        origin {          id          locationCode          IATACode          portCode          locationName          city          provinceStateRegion          country          postalCode        }        destination {          id          locationCode          IATACode          portCode          locationName          city          provinceStateRegion          country          postalCode        }        createdBy {          name          company        }        createdAt        updatedAt        lastStatus        workOrderStatus {          workflowStep {            step {              stepCode              stepName            }          }        }      }      total    }  }&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">edge-jkt1.interport.co.id</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lintas-ff-api</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-token</stringProp>
                <stringProp name="Header.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJzdUB4YXBpZW5zLmlkIiwibmFtZSI6InN1IiwidXNlclR5cGVJZCI6MSwidXNlclR5cGVDb2RlIjoiSW50ZXJuYWwiLCJyb2xlSWQiOjMsImNvbXBhbnkiOiJJTlRFUlBPUlQiLCJpYXQiOjE1OTg4NTk4MDQsImV4cCI6MTU5ODk0NjIwNH0.JR-sIW8Pw5E82IHi_CI6IUPzaa2WKIMPWNbdX9-I9Jc</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic bGludGFzOkt5KVNFWkg3XVRGJXlyXCE=</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://edge-jkt1.interport.co.id/lintas-ff-api</stringProp>
                <stringProp name="Authorization.username">lintas</stringProp>
                <stringProp name="Authorization.password">ffl1nt@s_4dm1n</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
