<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IFF" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config" enabled="true">
          <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://selenium:4444/wd/hub</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.file.detector">USELESS</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="load data cargo manifest when add worker order" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 8000);
var conditions = org.openqa.selenium.support.ui.ExpectedConditions;
var timeUnit = JavaImporter(java.util.concurrent.TimeUnit);

WDS.sampleResult.sampleStart()
WDS.log.info(&quot;Sample started&quot;);
WDS.browser.manage().deleteAllCookies()
WDS.log.info(&quot;Delete Cache&quot;);
WDS.browser.get(&apos;http://10.64.2.169:3011/&apos;)
WDS.log.info(&quot;go to LINTAS env. pre prod.&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;email&apos;)));
var email = WDS.browser.findElement(pkg.By.id(&apos;email&apos;));
email.sendKeys([&apos;su@xapiens.id&apos;]);
email.sendKeys(pkg.Keys.TAB);
WDS.log.info(&quot;type name&quot;);
var password = WDS.browser.findElement(pkg.By.id(&apos;password&apos;));
password.sendKeys([&apos;admin321&apos;]);
password.sendKeys(pkg.Keys.TAB);
WDS.log.info(&quot;type password&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;)));
//java.lang.Thread.sleep(2000)
var btn_login = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;));
btn_login.click();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
var cm = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;));
cm.click();
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside&quot;)));
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]&quot;)));
WDS.log.info(&quot;click button login&quot;);
//cargo manifest
var cm_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[4]&quot;));
cm_menu.click();
WDS.log.info(&quot;click menu cargo manifest&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
WDS.log.info(&quot;success load cargo manifest data&quot;);
var vassel = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[2]/td[2]/a&quot;));
vassel.click();
WDS.log.info(&quot;click vassel name sample&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;wo&apos;]/div/div/div/div/div[1]/div/a&quot;)));
var wo = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;wo&apos;]/div/div/div/div/div[1]/div/a&quot;));
wo.click();
WDS.log.info(&quot;click add work order&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]&quot;)))
WDS.log.info(&quot;success load add work order data&quot;);
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="load data cargo manifest when add package" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 8000);
var conditions = org.openqa.selenium.support.ui.ExpectedConditions;
var timeUnit = JavaImporter(java.util.concurrent.TimeUnit);

WDS.sampleResult.sampleStart()
WDS.log.info(&quot;Sample started&quot;);
WDS.browser.manage().deleteAllCookies()
WDS.log.info(&quot;Delete Cache&quot;);
WDS.browser.get(&apos;http://10.64.2.169:3011/&apos;)
WDS.log.info(&quot;go to LINTAS env. pre prod.&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;email&apos;)));
var email = WDS.browser.findElement(pkg.By.id(&apos;email&apos;));
email.sendKeys([&apos;su@xapiens.id&apos;]);
email.sendKeys(pkg.Keys.TAB);
WDS.log.info(&quot;type name&quot;);
var password = WDS.browser.findElement(pkg.By.id(&apos;password&apos;));
password.sendKeys([&apos;admin321&apos;]);
password.sendKeys(pkg.Keys.TAB);
WDS.log.info(&quot;type password&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;)));
//java.lang.Thread.sleep(2000)
var btn_login = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;));
btn_login.click();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
var cm = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;));
cm.click();
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside&quot;)));
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]&quot;)));
WDS.log.info(&quot;click button login&quot;);
//cargo manifest
var cm_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[4]&quot;));
cm_menu.click();
WDS.log.info(&quot;click menu cargo manifest&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
WDS.log.info(&quot;success load cargo manifest data&quot;);
var vassel = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[2]/td[2]/a&quot;));
vassel.click();
WDS.log.info(&quot;click vassel name sample&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;cargo&apos;]/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]/a&quot;)));
var wo = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;cargo&apos;]/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]/a&quot;));
wo.click();
WDS.log.info(&quot;click cargo no. sample&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/ul/li[2]/a&quot;)));
var wo = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/ul/li[2]/a&quot;));
wo.click();
WDS.log.info(&quot;click add package&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[2]&quot;)))
WDS.log.info(&quot;success load add package data&quot;);
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="load data of each module" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 8000);
var conditions = org.openqa.selenium.support.ui.ExpectedConditions;
var timeUnit = JavaImporter(java.util.concurrent.TimeUnit);

WDS.sampleResult.sampleStart()
WDS.log.info(&quot;Sample started&quot;);
WDS.browser.manage().deleteAllCookies()
WDS.log.info(&quot;Delete Cache&quot;);
WDS.browser.get(&apos;http://10.64.2.169:3011/&apos;)
WDS.log.info(&quot;go to LINTAS env. pre prod.&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;email&apos;)));
var email = WDS.browser.findElement(pkg.By.id(&apos;email&apos;));
email.sendKeys([&apos;su@xapiens.id&apos;]);
email.sendKeys(pkg.Keys.TAB);
WDS.log.info(&quot;type name&quot;);
var password = WDS.browser.findElement(pkg.By.id(&apos;password&apos;));
password.sendKeys([&apos;admin321&apos;]);
password.sendKeys(pkg.Keys.TAB);
WDS.log.info(&quot;type password&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;)));
//java.lang.Thread.sleep(2000)
var btn_login = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div/div[2]/form/button&quot;));
btn_login.click();
WDS.log.info(&quot;click button login&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside&quot;)));
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[1]&quot;)));
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
WDS.log.info(&quot;check poin&quot;);
//var aside = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]&quot;));
//aside.click();
//WDS.log.info(&quot;click in&quot;);
var order_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]/ul/li[2]&quot;));
order_menu.click();
WDS.log.info(&quot;click menu order&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
WDS.log.info(&quot;success load order data&quot;);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]&quot;)));
//WDS.log.info(&quot;check poin&quot;);
//var poin = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]&quot;));
//poin.click();
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside&quot;)));
//WDS.log.info(&quot;check poin&quot;);
//planning
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside/div[2]/ul/li[3]&quot;)));
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/aside/div[2]&quot;)));
var planning_menu = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[1]/aside/div[2]/ul/li[3]&quot;));
planning_menu.click();
WDS.log.info(&quot;click menu planning&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/a&quot;)))
WDS.log.info(&quot;success load planning data&quot;);
//cargo manifest
var cm_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[4]&quot;));
cm_menu.click();
WDS.log.info(&quot;click menu cargo manifest&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div/div/div/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/button[1]/img&quot;)))
WDS.log.info(&quot;success load cargo manifest data&quot;);
//execution
var execution_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[5]&quot;));
execution_menu.click();
WDS.log.info(&quot;click menu execution&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/a&quot;)))
WDS.log.info(&quot;success load execution data&quot;);
//settlement
var settlement_menu = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[1]/aside/div[2]/ul/li[6]&quot;));
settlement_menu.click();
WDS.log.info(&quot;click menu settlement&quot;);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;__next&apos;]/div/div/div/div[2]/div/div/div/div/div[2]/div/div[1]/table/tbody/tr[1]/td[1]/a&quot;)))
WDS.log.info(&quot;success load settlement data&quot;);
WDS.sampleResult.sampleEnd()

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/noviantonugroho/Downloads/apache-jmeter-5.3/bin/lintas/summery.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/noviantonugroho/Downloads/apache-jmeter-5.3/bin/lintas/summery.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/noviantonugroho/Documents/xapiens/lintas/performance/bin/lintas/summery.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
